import telebot, datetime, time, math, re

from telebot import types




BOT_TOKEN = '' # –¢–æ–∫–µ–Ω –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞

BOT_NAME = 'calc_bot' # –ò–º—è –¥–ª—è –±–æ—Ç–∞. –ù—É–∂–Ω–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –±–æ—Ç—É –ø–æ –∏–º–µ–Ω–∏

bot = telebot.TeleBot(BOT_TOKEN)




TIMEOUT_CONNECTION = 5 # –¢–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è




WITHOUT_ICON = 'https://raw.githubusercontent.com/6eremotuk01/Calculator-bot/master/img/without.jpg' # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∫–æ–Ω–∫—É "c –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º"

WITH_ICON = 'https://raw.githubusercontent.com/6eremotuk01/Calculator-bot/master/img/with.jpg' # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∫–æ–Ω–∫—É "–±–µ–∑ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"




# –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

START_MESSAGE = """–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∞ —è —Ç–µ–±–µ —Å–∫–∞–∂—É –æ—Ç–≤–µ—Ç)"""

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

HELP_MESSAGE = """–ú–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ. –í—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∞ —è –≤–∞–º –≤–æ–∑–≤—Ä–∞—â–∞—é –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.



***–û–ø–µ—Ä–∞—Ç–æ—Ä—ã***:

    + - —Å–ª–æ–∂–µ–Ω–∏–µ;

    - - –≤—ã—á–∏—Ç–∞–Ω–∏–µ;

    \* - —É–º–Ω–æ–∂–µ–Ω–∏–µ;

    / - –¥–µ–ª–µ–Ω–∏–µ;

    \*\* - –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–Ω—å.

    

***–§—É–Ω–∫—Ü–∏–∏***:

    cos(x) - –∫–æ—Å–∏–Ω—É—Å x;

    sin(x) - —Å–∏–Ω—É—Å x;

    tg(x) - —Ç–∞–Ω–≥–µ–Ω—Å x;

    fact(x) - —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª x;

    sqrt(x) - –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å —Ö;

    sqr(x) - —Ö –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ.



***–õ–æ–≥–∞—Ä–∏—Ñ–º—ã***:

    log2(x) - –ª–æ–≥–∞—Ä–∏—Ñ–º —Ö –ø–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—é 2;

    lg(—Ö) - –¥–µ—Å—è—Ç–∏—á–Ω—ã–π –ª–æ–≥–∞—Ä–∏—Ñ–º —Ö;

    ln(x) - –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ª–æ–≥–∞—Ä–∏—Ñ–º x;

    log(b, —Ö) - –ª–æ–≥–∞—Ä–∏—Ñ–º —Ö –ø–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—é b;



***–°–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è***:

    0bx - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ —Ö –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ;

    0ox - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Å—å–º–∏—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ —Ö –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ;

    0xx - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ —Ö –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ;"""




–ø–∏ = –ø = p = pi = 3.141592653589793238462643 # —á–∏—Å–ª–æ –ü–∏ asd 




# –ù–∏–∂–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ...

def fact(float_):

    return math.factorial(float_)




def cos(float_):

    return math.cos(float_)




def sin(float_):

    return math.sin(float_)




def tg(float_):

    return math.tan(float_)

    

def tan(float_):

    return math.tan(float_)







def ln(float_):

    return math.log(float_)




def log(base, float_):

    return math.log(float_, base)




def lg(float_):

    return math.log10(float_)




def log2(float_):

    return math.log2(float_)




def exp(float_):

    return math.exp(float_)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π-–∫–æ–º–∞–Ω–¥

@bot.message_handler(commands=['start', 'help'])

def send_start(message):

    print('%s (%s): %s' %(message.chat.first_name, message.chat.username, message.text))

    msg = None




    if message.text.lower() == '/start':

        msg = bot.send_message(message.chat.id, START_MESSAGE, parse_mode='markdown')




    elif message.text.lower() == '/help':

        msg = bot.send_message(message.chat.id, HELP_MESSAGE, parse_mode='markdown')

        

    if (msg):

        print('–ë–æ—Ç: %s'%msg.text)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

@bot.message_handler(func = lambda message: True)

def answer_to_user(message):

    print('%s (%s): %s' %(message.chat.first_name, message.chat.username, message.text))

    msg = None




    user_message = message.text.lower()




    if BOT_NAME:

        regex = re.compile(BOT_NAME.lower())

        print(regex.search(user_message))

        if regex.search(user_message) == None:

            return




        regex = re.compile('%s[^a-z]'%(BOT_NAME.lower()))

        user_message = regex.sub("", user_message)




    user_message = user_message.lstrip()

    user_message = user_message.rstrip()

    

    print(user_message)




    if user_message == '–ø—Ä–∏–≤–µ—Ç':

        msg = bot.send_message(message.chat.id, '*–ü—Ä–∏–≤–µ—Ç, %s*'%(message.chat.first_name), parse_mode='markdown')




    elif user_message == '–ø–æ–º–æ—â—å':

        msg = bot.send_message(message.chat.id, HELP_MESSAGE, parse_mode='markdown')




    else:

        try:

            answer = str(eval(user_message.replace(' ', '')))

            msg = bot.send_message(message.chat.id, user_message.replace(' ', '') + ' = ' + answer)

                

        except SyntaxError:

            msg = bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. \n–ò—Å—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞')

        except NameError:

üòâ, [03.06.21 15:32]
msg = bot.send_message(message.chat.id, '–ü–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ—Ç–æ—Ä—É—é –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ —è –Ω–µ –∑–Ω–∞—é. \n–ò—Å—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞')

        except TypeError:

            msg = bot.send_message(message.chat.id, '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—à–∏–±–∫–∞ —Ç–∏–ø–æ–≤. \n–ò—Å—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞')

        except ZeroDivisionError:

            msg = bot.send_message(message.chat.id, '–í –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã –¥–µ–ª–∏—Ç–µ –Ω–∞ –Ω–æ–ª—å. \n–ò—Å—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞')




    if (msg):

        print('–ë–æ—Ç: %s'%msg.text)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–∞

@bot.inline_handler(func=lambda query: True)

def inline_answer_to_user(inline_query):

    answer = 0

    answer_list = []

    try:

        answer = str(eval(inline_query.query.lower().replace(' ', '')))

        answer_to_send = answer.replace('*', '\*')

        query_to_send = inline_query.query.replace('*', '\*').lower().replace(' ', '')




        answer_list.append(types.InlineQueryResultArticle(

            id = 0,

            title = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º',

            description='%s = %s' % (inline_query.query, answer),

            input_message_content = types.InputTextMessageContent(

                message_text = '%s = *%s*' % (query_to_send, answer_to_send),

                parse_mode = 'markdown'),

            thumb_url = WITH_ICON

        ))




        answer_list.append(types.InlineQueryResultArticle(

            id = 1,

            title = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –≤—ã—Ä–∞–∂–µ–Ω–∏—è',

            description='%s' % (answer),

            input_message_content = types.InputTextMessageContent(

                message_text = '*%s*' % (answer_to_send),

                parse_mode = 'markdown'),

            thumb_url = WITHOUT_ICON

        ))

            

    except SyntaxError: answer = False

    except NameError: answer = False

    except TypeError: answer = False

    except ZeroDivisionError: answer = False




    if (not answer):    

        answer_list = []

        answer_list.append(types.InlineQueryResultArticle(

            id = 0,

            title = '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä',

            description='–ß—Ç–æ–±—ã –ø–æ—Å–∏—á—Ç–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ - –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ.\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∞–≤–∫—É, —Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π –∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"/help\"',

            input_message_content = types.InputTextMessageContent(message_text = '–Ø —Ö–æ—Ç–µ–ª –ø–æ—Å—á–∏—Ç–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –Ω–∞–∂–∞–ª –Ω–µ —Ç—É–¥–∞')

        ))

    

    bot.answer_inline_query(inline_query.id, answer_list)




# –í—Ö–æ–¥ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É

if (__name__ == '__main__'):

    while True:

        try:

            bot.polling(none_stop=True)

        except Exception as e:

            print ('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ %s —Å–µ–∫.'%TIMEOUT_CONNECTION)

            time.sleep(TIMEOUT_CONNECTION)